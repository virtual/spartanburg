(function (a) { a.fn.associateCheckboxes = function (b) { var c = a.extend({}, a.fn.associateCheckboxes.defaults, b); return this.each(function () { $checkset = a(this); var b = a.extend({}, c, $checkset.data()); a.fn.associateCheckboxes.initialize($checkset, b) }) }; a.fn.associateCheckboxes.defaults = {}; a.fn.associateCheckboxes.initialize = function (b, c) { b.click(function () { a.fn.associateCheckboxes.toggle(this, c) }) }; a.fn.associateCheckboxes.toggle = function (b, c) { checksetID = a(b).data("checksetmaster"); bChecked = a(b).attr("checked"); if (bChecked == "checked") { a("[data-checkset=" + checksetID + "]").attr("checked", "checked").change() } else { a("[data-checkset=" + checksetID + "]").removeAttr("checked").change() } } })(jQuery); (function (a) { a.fn.listFilter = function (b) { var c = a.extend({}, a.fn.listFilter.defaults, b); return this.each(function () { $filter = a(this); var b = a.extend({}, c, $filter.data()); a.fn.listFilter.initialize($filter, b) }) }; a.fn.listFilter.defaults = { filteroperation: "or", inputclass: "", containerselector: "", itemselector: "", emptyselector: "" }; a.fn.listFilter.initialize = function (b, c) { a(c.errorselector).hide(); var d = c.inputclass != "" ? "input." + c.inputclass : "input"; b.find(d).each(function () { a(this).bind("change.listfilter", function () { a.fn.listFilter.filterBy[c.filteroperation](b, this, c) }) }) }; a.fn.listFilter.filterBy = { or: function (b, c, d) { listToFilter = d.filterfor; inputRef = d.inputclass != "" ? "input." + d.inputclass : "input"; a("#" + listToFilter + ' [data-tag*="' + a(c).attr("value") + '"]').hide(); a.each(b.find(inputRef + ":checked"), function () { a("#" + listToFilter + ' [data-tag*="' + a(this).attr("value") + '"]').show() }); a.fn.listFilter.cleanup(b, d) }, exclusive: function (b, c, d) { listToFilter = d.filterfor; inputRef = d.inputclass != "" ? "input." + d.inputclass : "input"; a("#" + listToFilter + " [data-tag]").hide(); a.each(b.find(inputRef + ":checked"), function () { if (a(this).attr("value") == "all") { a("#" + listToFilter + " [data-tag]").show() } else { a("#" + listToFilter + ' [data-tag*="' + a(this).attr("value") + '"]').show() } }); if (b.find(inputRef + ":checked").length <= 0) { a("#" + listToFilter + " [data-tag]").show() } a.fn.listFilter.cleanup(b, d) } }; a.fn.listFilter.cleanup = function (b, c) { listToFilter = c.filterfor; a.each(a("#" + listToFilter).find(c.containerselector), function () { if (a(this).find(c.itemselector).filter(function () { return !(a(this).css("display") == "none") }).length == 0) { a(this).hide() } else { a(this).show() } });  if (a("#" + listToFilter).find(c.containerselector + ":visible").length == 0) { a(c.emptyselector).show() } else { a(c.emptyselector).hide() } } })(jQuery); $(function () { $("[data-checksetmaster]").associateCheckboxes(); $("[data-filterfor]").listFilter() })